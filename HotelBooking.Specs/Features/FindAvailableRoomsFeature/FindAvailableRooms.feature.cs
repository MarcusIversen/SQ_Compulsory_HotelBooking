// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HotelBooking.Specs.Features.FindAvailableRoomsFeature
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FindAvailableRoomsFeature : object, Xunit.IClassFixture<FindAvailableRoomsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FindAvailableRooms.feature"
#line hidden
        
        public FindAvailableRoomsFeature(FindAvailableRoomsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/FindAvailableRoomsFeature", "Find Available Rooms", "To ensure guests can see what rooms are available for booking.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Hotel rooms that are not booked should be listed as available rooms")]
        [Xunit.TraitAttribute("FeatureTitle", "Find Available Rooms")]
        [Xunit.TraitAttribute("Description", "Hotel rooms that are not booked should be listed as available rooms")]
        [Xunit.TraitAttribute("Category", "mytag")]
        [Xunit.InlineDataAttribute("2024-12-01", "2024-12-10", "2024-12-03", "2024-12-05", "2024-12-06", "2024-12-10", "1, 2", new string[0])]
        [Xunit.InlineDataAttribute("2024-12-01", "2024-12-10", "2024-12-03", "2024-12-08", "2024-12-02", "2024-12-04", "2", new string[0])]
        [Xunit.InlineDataAttribute("2024-12-01", "2024-12-10", "2024-12-01", "2024-12-10", "2024-12-01", "2024-12-10", "-1", new string[0])]
        public async System.Threading.Tasks.Task HotelRoomsThatAreNotBookedShouldBeListedAsAvailableRooms(string available_Start_Date, string available_End_Date, string booking_Start_Date, string booking_End_Date, string search_Start_Date, string search_End_Date, string expected_Available_Rooms_Id, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("available_start_date", available_Start_Date);
            argumentsOfScenario.Add("available_end_date", available_End_Date);
            argumentsOfScenario.Add("booking_start_date", booking_Start_Date);
            argumentsOfScenario.Add("booking_end_date", booking_End_Date);
            argumentsOfScenario.Add("search_start_date", search_Start_Date);
            argumentsOfScenario.Add("search_end_date", search_End_Date);
            argumentsOfScenario.Add("expected_available_rooms_id", expected_Available_Rooms_Id);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Hotel rooms that are not booked should be listed as available rooms", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
        await testRunner.GivenAsync(string.Format("there are hotel rooms available for the period from \"{0}\" to \"{1}\"", available_Start_Date, available_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
        await testRunner.AndAsync(string.Format("some rooms are booked for the period from \"{0}\" to \"{1}\"", booking_Start_Date, booking_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
        await testRunner.WhenAsync(string.Format("a user searches for available rooms for the period from \"{0}\" to \"{1}\"", search_Start_Date, search_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
        await testRunner.ThenAsync(string.Format("the available rooms should include \"{0}\"", expected_Available_Rooms_Id), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await FindAvailableRoomsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await FindAvailableRoomsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
